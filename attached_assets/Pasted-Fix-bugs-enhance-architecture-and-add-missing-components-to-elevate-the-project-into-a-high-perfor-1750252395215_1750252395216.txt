Fix bugs, enhance architecture, and add missing components to elevate the project into a high-performance, AI-driven, multi-user Telegram Signal Copier with image parsing, stealth EA execution, real-time sync, and scalable admin controls.

🛠️ FIX & HARDEN EXISTING CORE LOGIC
🐞 Bugs to Fix
Message Handling Delays – Ensure Telethon fetches are async & non-blocking

Duplicate Trade Execution – Add trade hash check to avoid re-trading same message

Low-confidence misfires – Set strict fallback for AI parser below 85% confidence

EA not syncing at times – Add retry loop & checksum validation for signal file

OCR crashing on poor images – Add fallback to “text only” or notify admin

✅ Fixes to Implement
Add message_id + channel_id fingerprint to prevent duplicates

Add signal timestamp and status (pending, executed, ignored, failed)

Log every signal + parser output + EA result in trades.jsonl or database

Wrap all critical parsers in try/except with logging

🧱 STRUCTURE REFACTOR (Clean, Scalable)
pgsql
Copy
Edit
/core/
  parser/              ← AI + rule engine
  mt5_bridge/          ← Signal → EA logic
  backend/             ← FastAPI API
  userbot/             ← Telethon listener
  frontend/            ← React UI
  storage/             ← signal.json, logs, configs
  ocr/                 ← PaddleOCR or EasyOCR
🔥 NEW FEATURES TO ADD (HIGH IMPACT)
🔹 1. Real-Time Telegram Scraper
Add full support for live parsing from 50–100 channels using Telethon with rate-limiting.

Support multiple sessions

Async message queue using asyncio.Queue or Redis

🔹 2. Multi-User MT5 Execution Engine
Each user/account has isolated signals, configs, and EA output file

Signal routed to signals/user_{id}.json

EA loads only their file

Support: user_id, allowed_pairs, risk_profile, sl_adjust

🔹 3. Admin-Controlled Parser Retraining
Build /admin/parser/trainer endpoint & frontend interface

Upload labeled JSON to retrain AI model

Rebuild & redeploy model (optionally auto via HuggingFace Trainer or spaCy CLI)

Mark parser mistakes in UI → add to training set

🔹 4. Performance Tracker + Backtester
Add /api/performance and /backtest endpoints

Track TP/SL hit rate, avg RR per provider

Simulate entry based on historical signal vs. candle data

Display win%, loss%, drawdown by week/month

🔹 5. WebSocket Live Signal Feed
Push live signal updates to frontend dashboard in real time

Use FastAPI’s WebSocket or Socket.IO

frontend subscribes to new parsed messages per user

Optional alert popup: “New trade: BUY XAUUSD”

🔹 6. Role-Based Access Control (RBAC)
Add Admin, Editor, Viewer roles

Admin: full system control

Editor: parse override, channel config

Viewer: read-only access to signals

🔹 7. Execution Modes: Shadow / Semi-Auto / Auto
User can toggle trade mode from dashboard

Shadow: log signal, no trade

Semi-auto: confirm via Telegram bot

Auto: send instantly to EA

🔹 8. Full Image Signal Support
OCR extraction + link image to parsed signal

Extract caption text if available

If only image: run OCR + parse result

Store image_path in signal metadata

Optional: display image in dashboard next to result

✨ BONUS ADVANCEMENTS
Feature	Description
Provider Scoring	Calculate trust index from TP/SL rates
Timezone-aware Trade Filter	Set per-user trading hours
Confirmation Bot (Telegram)	Confirm trades via inline button
Risk Prechecks	Reject trade if SL/TP missing or invalid
Admin Chat Logs	List messages from all channels with filter

📦 OUTPUT EXAMPLE (Unified JSON Signal)
json
Copy
Edit
{
  "signal_id": "XAUUSD_1699541234",
  "intent": "open_trade",
  "pair": "XAUUSD",
  "action": "buy",
  "entry": 1970.50,
  "sl": 1965.00,
  "tp": [1980, 1990],
  "order_type": "market",
  "volume_percent": null,
  "modifications": { "sl_to_be": false, "tp_update": null },
  "confidence": 0.94,
  "source": "ocr",
  "user_id": "u123",
  "image": "photo_123.jpg",
  "status": "pending"
}
✅ COMMAND TO TRIGGER FULL SYSTEM
Use one master command to launch:

bash
Copy
Edit
python start.py
Starts backend API

Starts signal parser

Starts OCR server

Starts signal dispatcher to EA

Starts userbot listener

Starts frontend (optional in parallel)

🚀 GOAL
Your system should:

Handle 500+ channels

Parse signals from text or image

Run locally or on VPS

Auto-train parser

Send to untraceable EA

Be controlled via one admin dashboard

